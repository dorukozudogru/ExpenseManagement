@model IEnumerable<ExpenseManagement.Models.BankLoans>

@{
    ViewData["Title"] = "Banka Kredileri";
}

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        <h5 class="box-title">
                            <i class="fa-solid fa-money-bill-transfer"></i>&nbsp;Banka Kredileri
                            <a class="btn btn-light text-primary btn-sm float-right" asp-action="Create"><i class="fa fa-plus"></i>&nbsp;&nbsp;Yeni Oluştur</a>
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <div class="card-body">
                                <table id="ItemsTable" class="table table-bordered table-striped" width="100%">
                                    <thead>
                                        <tr>
                                            <th>
                                                @Html.DisplayNameFor(model => model.Id)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.BankBranch.Name)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.Amount)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.InstallmentAmount)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.TotalAmountToBeRepaid)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.Interest)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.Cost)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.StartDate)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.FinishDate)
                                            </th>
                                            <th>İşlemler</th>
                                        </tr>
                                    </thead>
                                    <tfoot>
                                        <tr>
                                            <td></td>
                                            <td style="font-weight:bold">Toplam:</td>
                                            <td style="font-weight:bold"></td>
                                            <td style="font-weight:bold"></td>
                                            <td style="font-weight:bold"></td>
                                            <td style="font-weight:bold"></td>
                                            <td style="font-weight:bold"></td>
                                            <td colspan="2"></td>
                                            <td style="font-weight:bold"></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    window.onload = function getAll() {
        $("#ItemsTable").DataTable({
            "language": {
                processing: '<i class="fas fa-sync fa-spin fa-3x fa-fw"></i><span class="sr-only">Yükleniyor...</span> ',
                zeroRecords: "Hiçbir kayıt bulunamadı.",
                emptyTable: "Kayıt bulunmamaktadır.",
                search: "Ara:",
                oPaginate: {
                    "sFirst": "İlk",
                    "sLast": "Son",
                    "sNext": "»",
                    "sPrevious": "«"
                },
                sLengthMenu: "Listelenen maksimum kayıt sayısı: _MENU_",
                sInfo: "Toplam _TOTAL_ kayıttan _START_ - _END_ arası gösteriliyor",
            },
            "processing": true,
            "serverSide": true,
            "searchDelay": 1200,
            "stateSave": true,
            "stateDuration": -1,
            "searching": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;

                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                amountTotal = api
                    .column(2, { page: 'current' })
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                $(api.column(2).footer()).html(
                    currency(amountTotal, { decimal: ',', separator: '.', symbol: '' }).format() + ' ₺'
                );

                amountTotal2 = api
                    .column(3, { page: 'current' })
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                $(api.column(3).footer()).html(
                    currency(amountTotal2, { decimal: ',', separator: '.', symbol: '' }).format() + ' ₺'
                );

                amountTotal3 = api
                    .column(4, { page: 'current' })
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                $(api.column(4).footer()).html(
                    currency(amountTotal3, { decimal: ',', separator: '.', symbol: '' }).format() + ' ₺'
                );

                amountTotal4 = api
                    .column(6, { page: 'current' })
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                $(api.column(6).footer()).html(
                    currency(amountTotal4, { decimal: ',', separator: '.', symbol: '' }).format() + ' ₺'
                );
            },
            "ajax": {
                "url": "/BankLoan/Post",
                "method": "POST"
            },
            "columns": [
                { "data": "id" },
                {
                    "data": "bankBranch.name",
                    "orderable": false
                },
                {
                    "data": "amount",
                    "render": function (data, type, full, meta) {
                        if (data != null) {
                            return currency(full.amount, { decimal: ',', separator: '.', symbol: '' }).format() + " ₺";
                        }
                        return "-";
                    }
                },
                {
                    "data": "installmentAmount",
                    "render": function (data, type, full, meta) {
                        if (data != null) {
                            return currency(full.installmentAmount, { decimal: ',', separator: '.', symbol: '' }).format() + " ₺";
                        }
                        return "-";
                    }
                },
                {
                    "data": "totalAmountToBeRepaid",
                    "render": function (data, type, full, meta) {
                        if (data != null) {
                            return currency(full.totalAmountToBeRepaid, { decimal: ',', separator: '.', symbol: '' }).format() + " ₺";
                        }
                        return "-";
                    }
                },
                {
                    "data": "interest",
                    "orderable": false,
                    "render": function (data, type, full, meta) {
                        return "%" + currency(full.interest, { decimal: ',', separator: '.', symbol: '' }).format();
                    }
                },
                {
                    "data": "cost",
                    "render": function (data, type, full, meta) {
                        if (data != null) {
                            return currency(full.cost, { decimal: ',', separator: '.', symbol: '' }).format() + " ₺";
                        }
                        return "-";
                    }
                },
                {
                    "data": "startDate",
                    render: function (data, type, row) {
                        return window.moment(data).format("DD-MMMM-YYYY");
                    }
                },
                {
                    "data": "finishDate",
                    render: function (data, type, row) {
                        return window.moment(data).format("DD-MMMM-YYYY");
                    }
                },
                {
                    "data": "actionId", render: function (data, type, row) {
                        return '<div class="btn-group"><button type="button" class="btn" data-toggle="dropdown"><span class="fa fa-angle-down"></span></button></button><ul class="dropdown-menu dropdown-menu-right" style="border: 1px solid #00c0ef"> <a class="dropdown-item" href="BankLoan/Edit/' + row.id + '">Güncelle</a> <a class="dropdown-item" href="BankLoan/Delete/' + row.id + '">Sil</a></ul></div>'
                    },
                    "orderable": false
                }
            ],
            "ordering": true,
            "paging": true,
            "pagingType": "simple_numbers",
            "pageLength": 100
        });
        };
</script>